/*
   Copyright 2018 Banco Bilbao Vizcaya Argentaria, S.A.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

/*

	The monitor process receives a snapshot from gossip and polls the log
	until it arrives or times out. If it is a time out, then an alert is issued.

	Whe a new entry is saved into the log, it verifies its membership status
	against QED, and it is removed from the list of snapshots to poll against
	the log.

*/

package auditor

import (
	"bytes"
	"fmt"
	"math/rand"
	"os"
	"time"

	// para los IDs de los batches :?
	// "github.com/google/uuid"
	"github.com/cnf/structhash"
	"github.com/hashicorp/go-msgpack/codec"
)

func getSnapshotFromLog(version uint64) *SnapshotMsg {
	return nil
}

func newSnapshot(v uint64) *SnapshotMsg {
	return &SnapshotMsg{
		HistoryDigest: []byte{0x01},
		HyperDigest:   []byte{0x01},
		Version:       v,
		EventDigest:   []byte{0x01},
	}
}

func newBatch(i uint64) Batch {
	var b Batch
	start := i * 100
	for j := start; j < start+100; j++ {
		b.snaps = append(b.snaps, newSnapshot(j))
	}
	b.id = i
	return b
}

func deleteElem(b Batch, i int) Batch {
	copy(b.snaps[i:], b.snaps[i+1:])
	b.snaps[len(b.snaps)-1] = nil // or the zero value of T
	b.snaps = b.snaps[:len(b.snaps)-1]
	return b
}

func process(b Batch) {
	fmt.Println("process(): Processing ", len(b.snaps), " elements of batch id ", b.id)
}

func enqueue(b Batch, dst chan Batch) {
	dst <- b
	fmt.Println("enqueue(): Added batch ", b.id, " to output queue with ", len(b.snaps), " elements")
}

func sender(src, dst chan Batch) {
	for b := range src {
		fmt.Println("sender(): Sending batch ", b.id, "with ", len(b.snaps), " elements")
		if len(b.snaps) == 0 {
			fmt.Println("sender(): Finished batch ", b.id)
			os.Exit(0)
		} else {
			dst <- b
		}
	}
}

func main() {

	ticker := time.NewTicker(2 * time.Second)

	// gossiped batches input
	gossip := make(chan Batch, 5)

	// batches queue to be sent on each tick
	queueBatches := make(chan Batch, 500)

	// simulate gossip nodes
	for id := 0; id < 2; id++ {
		go newGossipNode(id, gossip)
	}

	recv := make(map[string]bool)

	for {
		select {
		case batch := <-gossip:
			key, _ := structhash.Hash(batch.snaps, int(batch.id))
			if _, ok := recv[key]; ok {
				fmt.Println("main(): Batch ", batch.id, "already seen with id ", key)
				break
			}
			// fmt.Println("Local recv of batch ", batch.id)
			var selected Batch
			r := rand.New(rand.NewSource(int64(rand.Intn(42))))

			if len(batch.snaps) <= 10 {
				selected = batch
				batch = Batch{
					id:    selected.id,
					snaps: nil,
				}
				fmt.Println("main(): Batch ", key, " finished")
			} else {
				selected.id = batch.id
				for i, _ := range r.Perm(10) {
					selected.snaps = append(selected.snaps, batch.snaps[i])
					batch = delete(batch, i)
				}
			}

			go process(selected)
			enqueue(batch, queueBatches)
			recv[key] = true
		case tick := <-ticker.C:
			fmt.Println("main(): send tick ", tick)
			go sender(queueBatches, gossip)
		}
	}
}

// msgpackHandle is a shared handle for encoding/decoding of structs
var msgpackHandle = &codec.MsgpackHandle{}

// Decode is used to encode a MsgPack object with type prefix.
func decode(buf []byte, out interface{}) error {
	return codec.NewDecoder(bytes.NewReader(buf), msgpackHandle).Decode(out)
}

// Encode is used to encode a MsgPack object with type prefix
func encode(cmd interface{}) ([]byte, error) {
	var buf bytes.Buffer
	err := codec.NewEncoder(&buf, msgpackHandle).Encode(cmd)
	return buf.Bytes(), err
}